class Solution {
public:

    vector<int> nextSmaller(vector<int>&heights){
        vector<int>ans(heights.size());
        stack<int>s;
        s.push(-1);
        for(int i=heights.size()-1;i>=0;i--){
            while(s.top()!=-1 && heights[s.top()]>=heights[i]){
                s.pop();
            }
            ans[i]=s.top();
            s.push(i);
        }
        return ans;
    }
       vector<int> prevSmaller(vector<int>&heights){
        vector<int>ans(heights.size());
        stack<int>s;
        s.push(-1);
        for(int i=0;i<heights.size();i++){
            while(s.top()!=-1 && heights[s.top()]>=heights[i]){
                s.pop();
            }
            ans[i]=s.top();
            s.push(i);
        }
        return ans;
    }


    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        vector<int>next(n);
        vector<int>prev(n);
        int area=0;

        next=nextSmaller(heights);
        prev=prevSmaller(heights);

        for(int i=0;i<n;i++){
            int l=heights[i];
            if(next[i]==-1)  next[i]=n;
            int b=next[i]-prev[i]-1;
            area=max(area,l*b);
        }
        return area;
        
    }
};